{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortBy","setSortBy","isGoodsReversed","setIsGoodsReversed","sortedGoods","goods","isReversed","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","updateGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,kBAAAA,E,gBAAAA,E,YAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,SAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KACMC,EA1BR,YAA4E,IAArDC,EAAoD,EAApDA,MAAOL,EAA6C,EAA7CA,OAAQM,EAAqC,EAArCA,WAChCC,EAAa,YAAOF,GAmBxB,OAjBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXR,IACFC,EAAgBA,EAAcQ,WAGzBR,EAOHS,CAAY,CACZX,MAAOT,EACPI,SACAM,WAAYJ,IAGhB,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYnB,IAAWL,EAASgB,WAElCS,QAAS,kBAAMnB,EAAUN,EAASgB,WALpC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYnB,IAAWL,EAASkB,SAElCO,QAAS,kBAAMnB,EAAUN,EAASkB,SALpC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAajB,IAEfkB,QAAS,kBAAMjB,GAAoBD,IALrC,sBAUEF,GAAUE,IACV,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,GAAmB,GACnBF,EAAUN,EAASI,UALvB,sBAaJ,6BACGK,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC9GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a61715ae.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'string',\n  Length = 'number',\n  Default = '',\n}\ninterface UpdateProps {\n  goods: string[],\n  sortBy: SortType,\n  isReversed: boolean\n}\n\nfunction updateGoods({ goods, sortBy, isReversed }: UpdateProps): string[] {\n  let preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortType.Default);\n  const [isGoodsReversed, setIsGoodsReversed] = useState(false);\n  const sortedGoods\n    = updateGoods({\n      goods: goodsFromServer,\n      sortBy,\n      isReversed: isGoodsReversed,\n    });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortBy !== SortType.Alphabet,\n          })}\n          onClick={() => setSortBy(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortBy !== SortType.Length,\n          })}\n          onClick={() => setSortBy(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isGoodsReversed,\n          })}\n          onClick={() => setIsGoodsReversed(!isGoodsReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortBy || isGoodsReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsGoodsReversed(false);\n              setSortBy(SortType.Default);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}